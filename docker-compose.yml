version: '3'

services:
  redis:
    image: redis
    container_name: redis
    hostname: redis
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: always

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - /usr/local/pgsql:/usr/local/pgsql
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    restart: always
  
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - 5433:80
    restart: unless-stopped

  nats:
    container_name: nats
    hostname: nats
    image: nats
    ports:
      - "${NATS_PORT}:${NATS_PORT}"

  etl:
    container_name: etl
    hostname: etl
    image: jujoss/off-etl:latest
    depends_on:
      - postgres
    environment:
      DB_HOST: ${DB_HOST}
      DB_DRIVER: ${DB_DRIVER}
      DB_PORT: ${POSTGRES_PORT}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      SSL_MODE: ${SSL_MODE}
      ETL_MAX_RUNS: ${ETL_MAX_RUNS}
      ETL_RUN_PERIOD: ${ETL_RUN_PERIOD}
    volumes:
      - ./off-etl:/app
    command: reflex -r '(\.go$$)' --decoration=fancy -s go run /app/main.go
    restart: always

  orders:
    container_name: orders
    hostname: orders
    image: jujoss/off-orders:latest
    depends_on:
      - postgres
      - nats
    environment:
      APP_PORT: ${HTTP_SERVICE_PORT}
      DB_HOST: ${DB_HOST}
      DB_DRIVER: ${DB_DRIVER}
      DB_PORT: ${POSTGRES_PORT}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      SSL_MODE: ${SSL_MODE}
      NATS_PORT: ${NATS_PORT}
    expose:
      - ${HTTP_SERVICE_PORT}
    volumes:
      - ./off-orders:/app
    command: reflex -r '(\.go$$)' --decoration=fancy -s go run /app/main.go
    restart: always

  users:
    container_name: users
    hostname: users
    image: jujoss/off-users:latest
    depends_on:
      - postgres
      - nats
    environment:
      APP_PORT: ${HTTP_SERVICE_PORT}
      DB_HOST: ${DB_HOST}
      DB_DRIVER: ${DB_DRIVER}
      DB_PORT: ${POSTGRES_PORT}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      SSL_MODE: ${SSL_MODE}
      NATS_PORT: ${NATS_PORT}
    expose:
      - ${HTTP_SERVICE_PORT}
    volumes:
      - ./off-users:/app
    command: reflex -r '(\.go$$)' --decoration=fancy -s go run /app/main.go
    restart: always

  notifications:
    container_name: notifications
    hostname: notifications
    image: jujoss/off-notifications:latest
    depends_on:
      - nats
    environment:
      NATS_PORT: ${NATS_PORT}
    volumes:
      - ./off-notifications:/app
    command: reflex -r '(\.go$$)' --decoration=fancy -s go run /app/main.go
    restart: always

  generator:
    container_name: generator
    hostname: generator
    image: jujoss/off-generator:latest
    depends_on:
      - orders
      - users
      - notifications
      - nats
    environment:
      GENERATOR_RUN_PERIOD: ${GENERATOR_RUN_PERIOD}
      NATS_PORT: ${NATS_PORT}
    volumes:
      - ./off-generator:/app
    command: reflex -r '(\.go$$)' --decoration=fancy -s go run /app/main.go
    restart: always

volumes:
  pgadmin_data: {}